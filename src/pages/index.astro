---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Button, Feature } from "@/types";
import { getEntry } from "astro:content";
import { FaCheck } from "react-icons/fa";

interface Homepage {
  banner: {
    title: string;
    content: string;
    image: string;
    button: Button;
  };
  features: Feature[];
}

const homepage = await getEntry("homepage", "-index");
const testimonial = await getEntry("sections", "testimonial");
const call_to_action = await getEntry("sections", "call-to-action");
const { banner, features }: Homepage = homepage.data;
---

<Base>
  <!-- Banner -->
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <div class="lg:col-7 md:col-9 mb-8 text-center">
          <h1
            set:html={markdownify(banner.title)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <p set:html={markdownify(banner.content)} class="mb-8" />

          <div class="hidden md:block animated-text bg-white rounded-r-lg px-6 py-4">
            <div class="text-sm font-semibold">CyPSi Lab <span></span></div>
            <div class="text-xl">Interdisciplinary Research Laboratory for</div>
          </div>
          <h1
          class="motion-preset-slide-right mb-4 bg-gradient-to-r from-green-300 via-blue-500 to-purple-600 bg-clip-text text-3xl font-extrabold text-transparent sm:text-5xl tracking-tight leading-none md:text-5xl lg:text-6xl">
          Cyber Physical Systems
  
          <span class="mt-2 sm:block"> Laboratory </span>
          </h1>
          <p set:html={markdownify(banner.content)} class="mb-8" />

          <!-- {
            banner.button.enable && (
              <a
                class="btn btn-primary"
                href={banner.button.link}
                target={
                  banner.button.link.startsWith("http") ? "_blank" : "_self"
                }
                rel="noopener"
              >
                {banner.button.label}
              </a>
            )
          } -->


        </div>
        <!-- {
          banner.image && (
            <div class="col-12">
              <ImageMod
                src={banner.image}
                height={380}
                width={1200}
                alt="banner"
                format="webp"
              />
            </div>
          )
        } -->
      </div>
    </div>
  </section>
  <!-- /Banner -->

  <!-- Features -->
  {
    features.map((feature, index: number) => (
      <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
        <div class="container">
          <div class="row items-center justify-between">
            <div
              class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
            >
              <ImageMod
                src={feature.image}
                height={480}
                width={520}
                alt={feature.title}
                format="webp"
              />
            </div>
            <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <h2 set:html={markdownify(feature.title)} class="mb-4" />
              <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
              <ul>
                {feature.bulletpoints.map((bullet: string) => (
                  <li class="relative mb-4 pl-6">
                    <FaCheck className={"absolute left-0 top-1.5"} />
                    <span set:html={markdownify(bullet)} />
                  </li>
                ))}
              </ul>
              {feature.button.enable && (
                <a class="btn btn-primary mt-5" href={feature.button.link}>
                  {feature.button.label}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    ))
  }
  <!-- /Features -->

  <Testimonial testimonial={testimonial} />
  <CallToAction call_to_action={call_to_action} />
</Base>

<style>
  animated-text {
    font-size: 34px;
    font-weight: 600;
    min-width: 280px;
  }

  .animated-text span {
    position: relative;
  }

  .animated-text span::before {
    content: "Youtuber";
    color: var(--accent);
    animation: words 40s infinite;
  }

  .animated-text span::after {
    content: "";
    position: absolute;
    width: calc(100% + 8px);
    height: 100%;
    background-color: #fff;
    border-left: 2px solid var(--accent);
    right: -8px;
    animation:
      cursor 1.6s infinite,
      typing 40s steps(14) infinite;
  }

  @keyframes cursor {
    to {
      border-left: 2px solid #fff;
    }
  }

  @keyframes words {
    0%,
    20% {
      content: " @Institute of Informatics and Communication";
    }
    21%,
    40% {
      content: " @Institute of Informatics and Communication";
    }
    41%,
    60% {
      content: " @University of Delhi";
    }
    61%,
    80% {
      content: " @University of Delhi";
    }
    81%,
    100% {
      content: " @University of Delhi";
    }
  }

  @keyframes typing {
    10%,
    15%,
    30%,
    35%,
    50%,
    55%,
    70%,
    75%,
    90%,
    95% {
      width: 0;
    }
    5%,
    20%,
    25%,
    40%,
    45%,
    60%,
    65%,
    80%,
    85% {
      width: calc(100% + 8px);
    }
  }
</style>
